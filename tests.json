[
  {
    "name": "addTwo",
    "spec": "Write a function, addTwo, that takes in a number and returns the number plus 2.",
    "tests": "describe(\"should work\", () => {\n  it(\"addTwo should be defined\", () => {\n    expect(typeof addTwo === \"function\").toBe(true);\n  });\n  it(\"should return 4 when passed 2\", () => {\n    expect(addTwo(2)).toBe(4);\n  });\n  it(\"should return 3 when passed 1\", () => {\n    expect(addTwo(1)).toBe(3);\n  });\n  it(\"should return 0 when passed -2\", () => {\n    expect(addTwo(-2)).toBe(0);\n  });\n  it(\"should return 2 when passed 0\", () => {\n    expect(addTwo(0)).toBe(2);\n  });\n});\n"
  },
  {
    "name": "addThree",
    "spec": "Write a function, addThree, that takes in a number and returns the number plus 3.",
    "tests": "describe(\"should work\", () => {\n  it(\"addThree should be defined\", () => {\n    expect(typeof addThree === \"function\").toBe(true);\n  });\n  it(\"should return 5 when passed 2\", () => {\n    expect(addThree(2)).toBe(5);\n  });\n  it(\"should return 4 when passed 1\", () => {\n    expect(addThree(1)).toBe(4);\n  });\n  it(\"should return 1 when passed -2\", () => {\n    expect(addThree(-2)).toBe(1);\n  });\n  it(\"should return 3 when passed 0\", () => {\n    expect(addThree(0)).toBe(3);\n  });\n});\n"
  },
  {
    "name": "lowerCase",
    "spec": "Define a function named lowerCase that takes in an input and returns that input as a string in all lower case letters. Returns false if the input passed is not a string.",
    "tests": "describe('lowerCase', function () {\n\n    describe(\"Core Functionality\", function () {\n\n        it('should be a declared function', function () {\n            expect(lowerCase).toBeDefined();\n        });\n        it(`should return \"${randomName.toLowerCase()}\" when passed the string \"${randomName}\"`, function () {\n            expect(lowerCase(randomName)).toBe(randomName.toLowerCase());\n        });\n        it(`should return \"${randomName.toLowerCase()}\" when passed the string \"${randomName.toUpperCase()}\"`, function () {\n            expect(lowerCase(randomName.toUpperCase())).toBe(randomName.toLowerCase());\n        });\n        it(`should return \"${randomName.toLowerCase()}\" when passed the string \"${randomName.toLowerCase()}\"`, function () {\n            expect(lowerCase(randomName.toLowerCase())).toBe(randomName.toLowerCase());\n        });\n        it(`should return \"${firstUpperCaseLetter.toLowerCase()}\" when passed the string \"${firstUpperCaseLetter}\"`, function () {\n            expect(lowerCase(firstUpperCaseLetter)).toBe(firstUpperCaseLetter.toLowerCase());\n        });\n        it(`should return \"${firstLowerCaseLetter}\" when passed the string \"${firstLowerCaseLetter}\"`, function () {\n            expect(lowerCase(firstLowerCaseLetter)).toBe(firstLowerCaseLetter);\n        });\n\n    });\n\n    describe(\"Validation\", function () {\n\n        it(`should return false when called without passing an argument`, function () {\n            expect(lowerCase()).toBeFalse()\n        });\n        it(`should return false when passed argument undefined`, function () {\n            expect(lowerCase(undefined)).toBeFalse()\n        });\n        it(`should return false when passed argument null`, function () {\n            expect(lowerCase(null)).toBeFalse()\n        });\n        it(`should return false when passed the number ${randomPositiveNumber}`, function () {\n            expect(lowerCase(randomPositiveNumber)).toBeFalse()\n        });\n        it(`should return false when passed the number ${randomNegativeNumber}`, function () {\n            expect(lowerCase(randomNegativeNumber)).toBeFalse()\n        });\n        it(`should return false when passed the boolean true`, function () {\n            expect(lowerCase(true)).toBeFalse()\n        });\n        it(`should return false when passed the boolean false`, function () {\n            expect(lowerCase(false)).toBeFalse()\n        });\n        it(`should return false when passed an object`, function () {\n            expect(lowerCase(exampleObject)).toBeFalse()\n        });\n        it(`should return false when passed an array`, function () {\n            expect(lowerCase(exampleArray)).toBeFalse()\n        });\n\n    });\n\n});"
  },
  {
    "name": "isAllLowerCase",
    "spec": "Define a function named isAllLowerCase that takes in a string and returns true if all characters in the string are lowercase otherwise it should return false.",
    "tests": "describe('isAllLowerCase', function () {\n\n    describe(\"Core Functionality\", function () {\n\n        it('should be a declared function', function () {\n            expect(isAllLowerCase).toBeDefined();\n        });\n        it(`should return false when passed the string \"${randomName}\"`, function () {\n            expect(isAllLowerCase(randomName)).toBeFalse();\n        });\n        it(`should return true when passed the string \"${randomName.toLowerCase()}\"`, function () {\n            expect(isAllLowerCase(randomName.toLowerCase())).toBeTrue();\n        });\n        it(`should return false when passed the string \"${randomName.toUpperCase()}\"`, function () {\n            expect(isAllLowerCase(randomName.toUpperCase())).toBeFalse();\n        });\n        it(`should return false when passed the string \"${firstUpperCaseLetter}\"`, function () {\n            expect(isAllLowerCase(firstUpperCaseLetter)).toBeFalse();\n        });\n        it(`should return true when passed the string \"${firstLowerCaseLetter}\"`, function () {\n            expect(isAllLowerCase(firstLowerCaseLetter)).toBeTrue()\n        });\n\n    });\n\n    describe(\"Validation\", function () {\n\n        it(`should return false when called without passing an argument`, function () {\n            expect(isAllLowerCase()).toBeFalse()\n        });\n        it(`should return false when passed argument undefined`, function () {\n            expect(isAllLowerCase(undefined)).toBeFalse()\n        });\n        it(`should return false when passed argument null`, function () {\n            expect(isAllLowerCase(null)).toBeFalse()\n        });\n        it(`should return false when passed the number ${randomPositiveNumber}`, function () {\n            expect(isAllLowerCase(randomPositiveNumber)).toBeFalse()\n        });\n        it(`should return false when passed the number ${randomNegativeNumber}`, function () {\n            expect(isAllLowerCase(randomNegativeNumber)).toBeFalse();\n        });\n        it(`should return false when passed the boolean true`, function () {\n            expect(isAllLowerCase(true)).toBeFalse();\n        });\n        it(`should return false when passed the boolean false`, function () {\n            expect(isAllLowerCase(false)).toBeFalse();\n        });\n        it(`should return false when passed an object`, function () {\n            expect(isAllLowerCase(exampleObject)).toBeFalse();\n        });\n        it(`should return false when passed an array`, function () {\n            expect(isAllLowerCase(exampleArray)).toBeFalse();\n        });\n\n    });\n\n});"
  },
  {
    "name": "isAllUpperCase",
    "spec": "Define a function named isAllUpperCase that takes in a string and returns true if all characters in the string are uppercase otherwise it should return false.",
    "tests": "describe('isAllUpperCase', function () {\n\n    describe(\"Core Functionality\", function () {\n\n        it('should be a declared function', function () {\n            expect(isAllUpperCase).toBeDefined();\n        });\n        it(`should return false when passed the string \"${randomName}\"`, function () {\n            expect(isAllUpperCase(randomName)).toBeFalse();\n        });\n        it(`should true when passed the string \"${randomName.toUpperCase()}\"`, function () {\n            expect(isAllUpperCase(randomName.toUpperCase())).toBeTrue();\n        });\n        it(`should return false when passed the string \"${randomName.toLowerCase()}\"`, function () {\n            expect(isAllUpperCase(randomName.toLowerCase())).toBeFalse();\n        });\n        it(`should return true when passed the string \"${firstUpperCaseLetter}\"`, function () {\n            expect(isAllUpperCase(firstUpperCaseLetter)).toBeTrue();\n        });\n        it(`should return false when passed the string \"${firstLowerCaseLetter}\"`, function () {\n            expect(isAllUpperCase(firstLowerCaseLetter)).toBeFalse();\n        });\n\n    });\n\n    describe(\"Validation\", function () {\n\n        it(`should return false when called without passing an argument`, function () {\n            expect(isAllUpperCase()).toBeFalse()\n        });\n        it(`should return false when passed argument undefined`, function () {\n            expect(isAllUpperCase(undefined)).toBeFalse()\n        });\n        it(`should return false when passed argument null`, function () {\n            expect(isAllUpperCase(null)).toBeFalse()\n        });\n        it(`should return false when passed the number ${randomPositiveNumber}`, function () {\n            expect(isAllUpperCase(randomPositiveNumber)).toBeFalse()\n        });\n        it(`should return false when passed the number ${randomNegativeNumber}`, function () {\n            expect(isAllUpperCase(randomNegativeNumber)).toBeFalse()\n        });\n        it(`should return false when passed the boolean true`, function () {\n            expect(isAllUpperCase(true)).toBeFalse()\n        });\n        it(`should return false when passed the boolean false`, function () {\n            expect(isAllUpperCase(false)).toBeFalse()\n        });\n        it(`should return false when passed an object`, function () {\n            expect(isAllUpperCase(exampleObject)).toBeFalse()\n        });\n        it(`should return false when passed an array`, function () {\n            expect(isAllUpperCase(exampleArray)).toBeFalse()\n        });\n\n    });\n\n});"
  },
  {
    "name": "isNotPalindrome",
    "spec": "Define a function named isNotPalindrome that takes in a string and returns true if that string is not palindrome, if the string is palindrome should return false.",
    "tests": "describe('isNotPalindrome', function () {\n\n    const palindromeStrings = [\"Anna\",\"Civic\",\"Kayak\",\"Level\",\"Madam\",\"Repaper\",\"Rotator\",\"Racecar\",\"Tenet\"]\n    const firstPalindromeWord = palindromeStrings[Math.floor(Math.random() * palindromeStrings.length)];\n    const secondPalindromeWord = palindromeStrings[Math.floor(Math.random() * palindromeStrings.length)];\n    const thirdPalindromeWord = palindromeStrings[Math.floor(Math.random() * palindromeStrings.length)];\n\n    describe(\"Core Functionality\", function () {\n\n        it('should be a declared function', function () {\n            expect(isNotPalindrome).toBeDefined();\n        });\n        it(`should return false when passed the string \"${firstPalindromeWord}\"`, function () {\n            expect(isNotPalindrome(firstPalindromeWord)).toBeFalse();\n        });\n        it(`should true when passed the string \"${randomName}\"`, function () {\n            expect(isNotPalindrome(randomName)).toBeTrue();\n        });\n        it(`should return false when passed the string \"${secondPalindromeWord.toLowerCase()}\"`, function () {\n            expect(isNotPalindrome(secondPalindromeWord.toLowerCase())).toBeFalse();\n        });\n        it(`should return true when passed the string \"${randomName.toLowerCase()}\"`, function () {\n            expect(isNotPalindrome(randomName.toLowerCase())).toBeTrue();\n        });\n        it(`should return false when passed the string \"${thirdPalindromeWord.toUpperCase()}\"`, function () {\n            expect(isNotPalindrome(thirdPalindromeWord.toUpperCase())).toBeFalse();\n        });\n        it(`should return false when passed an empty string`, function () {\n            expect(isNotPalindrome(\"\")).toBeFalse();\n        });\n\n    });\n\n    describe(\"Validation\", function () {\n\n        it(`should return true when called without passing an argument`, function () {\n            expect(isNotPalindrome()).toBeTrue()\n        });\n        it(`should return true when passed argument undefined`, function () {\n            expect(isNotPalindrome(undefined)).toBeTrue()\n        });\n        it(`should return true when passed argument null`, function () {\n            expect(isNotPalindrome(null)).toBeTrue()\n        });\n        it(`should return true when passed the number ${randomPositiveNumber}`, function () {\n            expect(isNotPalindrome(randomPositiveNumber)).toBeTrue()\n        });\n        it(`should return true when passed the number ${randomNegativeNumber}`, function () {\n            expect(isNotPalindrome(randomNegativeNumber)).toBeTrue()\n        });\n        it(`should return true when passed the boolean true`, function () {\n            expect(isNotPalindrome(true)).toBeTrue()\n        });\n        it(`should return true when passed the boolean false`, function () {\n            expect(isNotPalindrome(false)).toBeTrue()\n        });\n        it(`should return true when passed an object`, function () {\n            expect(isNotPalindrome(exampleObject)).toBeTrue()\n        });\n        it(`should return true when passed an array`, function () {\n            expect(isNotPalindrome(exampleArray)).toBeTrue()\n        });\n\n    });\n\n});"
  },
  {
    "name": "multiplyBy2",
    "spec": "Define a function named multiplyBy2 that takes in an input and multiplies it by 2 if the input is numeric. If the input is Not A Number, then return false.",
    "tests": "describe('multiplyBy2', function () {\n\n    describe(\"Core Functionality\", function () {\n\n        const firstInt = getRandomIntInclusive(30, 40)\n        const secondInt = getRandomIntInclusive(1, 20)\n\n        const thirdInt = getRandomIntInclusive(30, 40)\n        const forthInt = getRandomIntInclusive(1, 20)\n\n        it('should be a declared function', function () {\n            expect(multiplyBy2).toBeDefined();\n        });\n        it(`should return ${firstInt * 2} when passed the argument ${firstInt}`, function () {\n            expect(multiplyBy2(firstInt)).toBe(firstInt * 2);\n        });\n        it(`should return ${secondInt * 2} when passed the argument \"${secondInt}\"`, function () {\n            expect(multiplyBy2(secondInt.toString())).toBe(secondInt * 2);\n        });\n        it(`should return ${-thirdInt * 2} when passed the argument ${-thirdInt}`, function () {\n            expect(multiplyBy2(-thirdInt)).toBe(-thirdInt * 2);\n        });\n        it(`should return ${0} when passed the argument ${0}`, function () {\n            expect(multiplyBy2(0)).toBe(0);\n        });\n    });\n\n    describe(\"Validation\", function () {\n\n        it(`should return false when called without passing an argument`, function () {\n            expect(multiplyBy2()).toBeFalse()\n        });\n        it('should return false when a non numeric string is passed as argument', function () {\n            expect(multiplyBy2(randomName)).toBeFalse()\n        });\n        it(`should return false when undefined is passed as argument`, function () {\n            expect(multiplyBy2(undefined)).toBeFalse()\n        });\n        it(`should return false when null is passed as argument`, function () {\n            expect(multiplyBy2(null)).toBeFalse()\n        });\n        it(`should return false when the boolean true is passed as argument`, function () {\n            expect(multiplyBy2(true)).toBeFalse()\n        });\n        it(`should return false when the boolean false is passed as argument`, function () {\n            expect(multiplyBy2(false)).toBeFalse()\n        });\n        it(`should return false when an object is passed as argument`, function () {\n            expect(multiplyBy2(exampleObject)).toBeFalse()\n        });\n        it(`should return false when an array is passed as argument`, function () {\n            expect(multiplyBy2(exampleArray)).toBeFalse()\n        });\n\n    });\n\n});"
  },
  {
    "name": "convertHourToSec",
    "spec": "Define a function named convertHourToSec that takes in one input Hours. Return the conversation of the number of hours into total seconds. If the input is not numeric or a numeric string, convertHourToSec, should return false.",
    "tests": "describe('convertHourToSec', function () {\n\n    describe(\"Core Functionality\", function () {\n\n        const firstInt = getRandomIntInclusive(30, 40)\n        const secondInt = getRandomIntInclusive(1, 5)\n        const thirdInt = getRandomIntInclusive(1, 10)\n\n\n        it('should be a declared function', function () {\n            expect(convertHourToSec).toBeDefined();\n        });\n        it(`should return ${firstInt * 3600} when passed the argument ${firstInt}`, function () {\n            expect(convertHourToSec(firstInt)).toBe(firstInt * 3600);\n        });\n        it(`should return ${secondInt * 3600} when passed the argument \"${secondInt}\"`, function () {\n            expect(convertHourToSec(secondInt.toString())).toBe(secondInt * 3600);\n        });\n        it(`should return ${thirdInt * 3600} when passed the argument ${thirdInt}`, function () {\n            expect(convertHourToSec(thirdInt)).toBe(thirdInt * 3600);\n        });\n        it(`should return ${0} when passed the argument ${0}`, function () {\n            expect(convertHourToSec(0)).toBe(0);\n        });\n    });\n\n    describe(\"Validation\", function () {\n\n        it(`should return false when called without passing an argument`, function () {\n            expect(convertHourToSec()).toBeFalse()\n        });\n        it('should return false when a negative number is passed as argument', function () {\n            expect(convertHourToSec(randomNegativeNumber)).toBeFalse()\n        });\n        it('should return false when a non numeric string is passed as argument', function () {\n            expect(convertHourToSec(randomName)).toBeFalse()\n        });\n        it(`should return false when undefined is passed as argument`, function () {\n            expect(convertHourToSec(undefined)).toBeFalse()\n        });\n        it(`should return false when null is passed as argument`, function () {\n            expect(convertHourToSec(null)).toBeFalse()\n        });\n        it(`should return false when the boolean true is passed as argument`, function () {\n            expect(convertHourToSec(true)).toBeFalse()\n        });\n        it(`should return false when the boolean false is passed as argument`, function () {\n            expect(convertHourToSec(false)).toBeFalse()\n        });\n        it(`should return false when an object is passed as argument`, function () {\n            expect(convertHourToSec(exampleObject)).toBeFalse()\n        });\n        it(`should return false when an array is passed as argument`, function () {\n            expect(convertHourToSec(exampleArray)).toBeFalse()\n        });\n\n    });\n\n});"
  },
  {
    "name": "getLowestNumber",
    "spec": "Write a function named getLowestNumber that takes in 3 arguments. If all 3 inputs are numbers or numeric strings, then return the lowest number. If any of the 3 inputs is missing or non-numeric, then return false.",
    "tests": "describe('getLowestNumber', function () {\n\n    describe(\"Core Functionality\", function () {\n\n        const firstInt = getRandomIntInclusive(30, 40)\n        const secondInt = getRandomIntInclusive(1, 20)\n        const thirdInt = getRandomIntInclusive(50, 60)\n        const forthInt = getRandomIntInclusive(1, 20)\n        const fifthInt = getRandomIntInclusive(30, 40)\n        const sixthInt = getRandomIntInclusive(1, 20)\n\n        it('should be a declared function', function () {\n            expect(getLowestNumber).toBeDefined();\n        });\n        it(`should return ${Math.min(firstInt,secondInt,thirdInt)} when passed the arguments (${firstInt},${secondInt},${thirdInt})`, function () {\n            expect(getLowestNumber(firstInt,secondInt,thirdInt)).toBe(Math.min(firstInt,secondInt,thirdInt));\n        });\n        it(`should return ${Math.min(sixthInt,forthInt,-fifthInt)} when passed the arguments (\"${sixthInt}\",${forthInt},${-fifthInt})`, function () {\n            expect(getLowestNumber(sixthInt.toString(),forthInt,-fifthInt)).toBe(Math.min(sixthInt,forthInt,-fifthInt));\n        });\n\n    });\n\n    describe(\"Validation\", function () {\n\n        it(`should return false when called without passing an argument`, function () {\n            expect(getLowestNumber()).toBeFalse()\n        });\n        it('should return false when a non numeric string is passed as an argument', function () {\n            expect(getLowestNumber(randomPositiveEvenNumber(),randomName,randomPositiveNumber)).toBeFalse()\n        });\n        it(`should return false when undefined is passed as an argument`, function () {\n            expect(getLowestNumber(randomPositiveNumber,undefined,randomPositiveNumber)).toBeFalse()\n        });\n        it(`should return false when null is passed as an argument`, function () {\n            expect(getLowestNumber(null,randomPositiveNumericString,randomPositiveNumber)).toBeFalse()\n        });\n        it(`should return false when the boolean true is passed as an argument`, function () {\n            expect(getLowestNumber(true,randomPositiveNumber,randomPositiveNumber)).toBeFalse()\n        });\n        it(`should return false when the boolean false is passed as an argument`, function () {\n            expect(getLowestNumber(randomPositiveNumber,false,randomPositiveNumber)).toBeFalse()\n        });\n        it(`should return false when an object is passed as an argument`, function () {\n            expect(getLowestNumber(exampleObject,randomPositiveNumber,randomPositiveNumericString)).toBeFalse()\n        });\n        it(`should return false when an array is passed as an argument`, function () {\n            expect(getLowestNumber(randomPositiveNumericString,randomPositiveNumber,exampleArray)).toBeFalse()\n        });\n\n    });\n\n});"
  },
  {
    "name": "addStringLengths",
    "spec": "Write a function named addStringLengths that takes in two inputs. If both inputs provided are strings, addStringLengths returns the sum after adding the length (number of characters) of both strings. If either or both inputs are not strings, return false.",
    "tests": "describe('addStringLengths', function () {\n\n    describe(\"Core Functionality\", function () {\n\n        const firstInt = getRandomIntInclusive(2000, 10000)\n        const secondInt = getRandomIntInclusive(1, 21000)\n\n        const randomNameOne = randomNamesArray[Math.floor(Math.random() * randomNamesArray.length)];\n        const randomNameTwo = randomNamesArray[Math.floor(Math.random() * randomNamesArray.length)];\n        const randomNameThree = randomNamesArray[Math.floor(Math.random() * randomNamesArray.length)];\n        const randomNameFour = randomNamesArray[Math.floor(Math.random() * randomNamesArray.length)];\n\n\n        it('should be a declared function', function () {\n            expect(addStringLengths).toBeDefined();\n        });\n        it(`should return ${randomNameOne.length + randomNameTwo.length} when passed the arguments (\"${randomNameOne}\",\"${randomNameTwo}\")`, function () {\n            expect(addStringLengths(randomNameOne,randomNameTwo)).toBe(randomNameOne.length + randomNameTwo.length);\n        });\n        it(`should return ${randomNameThree.length} when passed the arguments (\"${randomNameThree}\",\"\")`, function () {\n            expect(addStringLengths(randomNameThree,\"\")).toBe(randomNameThree.length);\n        });\n        it(`should return ${\"\".length + \"\".length} when passed the arguments (\"\", \"\")`, function () {\n            expect(addStringLengths(\"\", \"\")).toBe(\"\".length + \"\".length);\n        });\n        it(`should return ${randomNameFour.length + firstInt.toString().length} when passed the arguments (\"${randomNameFour}\",\"${firstInt}\")`, function () {\n            expect(addStringLengths(randomNameOne,randomNameTwo)).toBe(randomNameOne.length + randomNameTwo.length);\n        });\n        it(`should return ${\"code\".length + \"up\".length} when passed the arguments (\"code\", \"up\")`, function () {\n            expect(addStringLengths(\"code\", \"up\")).toBe(\"code\".length + \"up\".length);\n        });\n    });\n\n    describe(\"Validation\", function () {\n\n        it(`should return false when called without passing an argument`, function () {\n            expect(addStringLengths()).toBeFalse()\n        });\n        it('should return false when a number is passed as an argument', function () {\n            expect(addStringLengths(randomName,randomPositiveNumber)).toBeFalse()\n        });\n        it(`should return false when undefined is passed as an argument`, function () {\n            expect(addStringLengths(randomName,undefined)).toBeFalse()\n        });\n        it(`should return false when null is passed as an argument`, function () {\n            expect(addStringLengths(null,randomName)).toBeFalse()\n        });\n        it(`should return false when the boolean true is passed as an argument`, function () {\n            expect(addStringLengths(true,randomName)).toBeFalse()\n        });\n        it(`should return false when the boolean false is passed as an argument`, function () {\n            expect(addStringLengths(randomName,false)).toBeFalse()\n        });\n        it(`should return false when an object is passed as an argument`, function () {\n            expect(addStringLengths(exampleObject,randomName)).toBeFalse()\n        });\n        it(`should return false when an array is passed as an argument`, function () {\n            expect(addStringLengths(randomName,exampleArray)).toBeFalse()\n        });\n\n\n    });\n\n});"
  },
  {
    "name": "subtract",
    "spec": "Write a function named subtract that takes in two inputs. If both inputs provided are numeric or numeric strings, subtract will return the difference when the second input is subtracted from the first input. If one or both inputs is not numeric or numeric strings, subtract should return false.",
    "tests": "describe('subtract', function () {\n\n    describe(\"Core Functionality\", function () {\n\n        const firstInt = getRandomIntInclusive(30, 40)\n        const secondInt = getRandomIntInclusive(1, 20)\n\n        const thirdInt = getRandomIntInclusive(30, 40)\n        const forthInt = getRandomIntInclusive(1, 20)\n\n        it('should be a declared function', function () {\n            expect(subtract).toBeDefined();\n        });\n        it(`should return ${firstInt - secondInt} when passed the arguments (${firstInt},${secondInt})`, function () {\n            expect(subtract(firstInt,secondInt)).toBe(firstInt - secondInt);\n        });\n        it(`should return ${firstInt - forthInt} when passed the arguments (\"${firstInt}\",${forthInt})`, function () {\n            expect(subtract(firstInt.toString(),forthInt)).toBe(firstInt - forthInt);\n        });\n        it(`should return ${-thirdInt - secondInt} when passed the arguments (${-thirdInt},\"${secondInt}\")`, function () {\n            expect(subtract((-thirdInt),secondInt.toString())).toBe(-thirdInt - secondInt);\n        });\n\n    });\n\n    describe(\"Validation\", function () {\n\n        it(`should return false when called without passing an argument`, function () {\n            expect(subtract()).toBeFalse()\n        });\n        it('should return false when a non numeric string is passed as an argument', function () {\n            expect(subtract(randomPositiveEvenNumber(),randomName)).toBeFalse()\n        });\n        it(`should return false when undefined is passed as an argument`, function () {\n            expect(subtract(randomPositiveNumber,undefined)).toBeFalse()\n        });\n        it(`should return false when null is passed as an argument`, function () {\n            expect(subtract(null,randomPositiveNumericString)).toBeFalse()\n        });\n        it(`should return false when the boolean true is passed as an argument`, function () {\n            expect(subtract(true,randomPositiveNumber)).toBeFalse()\n        });\n        it(`should return false when the boolean false is passed as an argument`, function () {\n            expect(subtract(randomPositiveNumber,false)).toBeFalse()\n        });\n        it(`should return false when an object is passed as an argument`, function () {\n            expect(subtract(exampleObject,randomPositiveNumericString)).toBeFalse()\n        });\n        it(`should return false when an array is passed as an argument`, function () {\n            expect(subtract(randomPositiveNumericString,exampleArray)).toBeFalse()\n        });\n\n    });\n\n});"
  },
  {
    "name": "calculateChange",
    "spec": "Write a function named calculateChange that takes in two inputs, totalPaid and totalCost. If both inputs are numeric or numeric strings, calculateChange should return the change after subtracting the cost from the amount paid. The return should be in $x.xx format as a string Note: it should return with two decimal places. If either or both inputs are not numeric or numeric strings, calculateChange should return false.",
    "tests": "describe('calculateChange', function () {\n\n    describe(\"Core Functionality\", function () {\n\n        const firstTotal = getRandomIntInclusive(5, 10)\n        const secondTotal = getRandomIntInclusive(25, 50)\n        const thirdTotal = getRandomIntInclusive(120, 200)\n\n        const firstSubtract = getRandomIntInclusive(1, 4)\n        const secondSubtract = getRandomIntInclusive(9, 19)\n        const thirdSubtract = getRandomIntInclusive(19, 99)\n\n        const randomCents = [.05,.25,.85,.50,.75]\n\n        const firstCents = randomCents[Math.floor(Math.random() * randomCents.length)];\n        const secondCents = randomCents[Math.floor(Math.random() * randomCents.length)]\n        const thirdCents = randomCents[Math.floor(Math.random() * randomCents.length)]\n\n\n\n        it('should be a declared function', function () {\n            expect(calculateChange).toBeDefined();\n        });\n        it(`should return \"${\"$\" + (firstTotal - (firstSubtract + firstCents)).toFixed(2)}\" when passed the arguments (${firstTotal},${firstSubtract + firstCents})`, function () {\n            expect(calculateChange(firstTotal,(firstSubtract + firstCents))).toBe(\"$\" + (firstTotal - (firstSubtract + firstCents)).toFixed(2));\n        });\n        it(`should return \"${\"$\" + ((secondTotal + secondCents) - secondSubtract).toFixed(2)}\" when passed the arguments (${secondTotal + secondCents},\"${secondSubtract}\")`, function () {\n            expect(calculateChange((secondTotal + secondCents),secondSubtract.toString())).toBe(\"$\" + ((secondTotal + secondCents) - secondSubtract).toFixed(2));\n        });\n        it(`should return \"${\"$\" + ((thirdTotal + thirdCents) - thirdSubtract).toFixed(2)}\" when passed the arguments (${thirdTotal + thirdCents},\"${thirdSubtract.toFixed(2)}\")`, function () {\n            expect(calculateChange((thirdTotal + thirdCents),thirdSubtract.toFixed(2))).toBe(\"$\" + ((thirdTotal + thirdCents) - thirdSubtract).toFixed(2));\n        });\n\n\n    });\n\n    describe(\"Validation\", function () {\n\n        it(`should return false when called without passing an argument`, function () {\n            expect(calculateChange()).toBeFalse()\n        });\n        it('should return false when a non numeric string is passed as an argument', function () {\n            expect(calculateChange(randomPositiveEvenNumber(),randomName)).toBeFalse()\n        });\n        it(`should return false when undefined is passed as an argument`, function () {\n            expect(calculateChange(randomPositiveNumber,undefined)).toBeFalse()\n        });\n        it(`should return false when null is passed as an argument`, function () {\n            expect(calculateChange(null,randomPositiveNumericString)).toBeFalse()\n        });\n        it(`should return false when the boolean true is passed as an argument`, function () {\n            expect(calculateChange(true,randomPositiveNumber)).toBeFalse()\n        });\n        it(`should return false when the boolean false is passed as an argument`, function () {\n            expect(calculateChange(randomPositiveNumber,false)).toBeFalse()\n        });\n        it(`should return false when an object is passed as an argument`, function () {\n            expect(calculateChange(exampleObject,randomPositiveNumericString)).toBeFalse()\n        });\n        it(`should return false when an array is passed as an argument`, function () {\n            expect(calculateChange(randomPositiveNumericString,exampleArray)).toBeFalse()\n        });\n\n    });\n\n});"
  },
  {
    "name": "isANumber",
    "spec": "Define a function named isANumber that takes in a value and returns true if the input is numeric, or false if the input is not numeric. Numeric strings should not be considered as numbers in this function, and should return false.",
    "tests": "describe('isANumber', function() {\n    describe('core functionality', function() {\n        it('should be a defined function', function() {\n            expect(typeof isANumber).toBe('function');\n        });\n        it('should return a boolean value', function() {\n            expect(typeof isANumber(4)).toBe('boolean');\n            expect(typeof isANumber(\"Bob\")).toBe('boolean');\n        });\n        it('should return true when passed 0 as input', function() {\n            expect(isANumber(0)).toBe(true);\n        });\n        it('should return true when passed -5 as input', function() {\n            expect(isANumber(-5)).toBe(true);\n        });\n        it('should return true when passed ' + randomNegativeNumber, function() {\n            expect(isANumber(randomNegativeNumber)).toBe(true);\n        });\n        it('should return true when passed ' + randomPositiveNumber, function() {\n            expect(isANumber(randomPositiveNumber)).toBe(true);\n        });\n        it('should return true when passed Infinity, since infinity is numeric.', function() {\n            expect(isANumber(Infinity)).toBe(true);\n        });\n        it('should return false when passed the boolean ' + randomBoolean, function() {\n            expect(isANumber(randomBoolean)).toBe(false);\n        });\n        it('should return false when passed the non-numeric string \"Grace Hopper', function() {\n            expect(isANumber(exampleString)).toBe(false);\n        });\n        it('should return false when passed null as the input', function() {\n            expect(isANumber(null)).toBe(false);\n        });\n        it('should return false when passed an array', function() {\n            expect(isANumber(exampleArray)).toBe(false);\n        });\n        it('should return false when passed an object', function() {\n            expect(isANumber(exampleObject)).toBe(false);\n        });\n        it('should return false when no input is passed in as an argument', function() {\n            expect(isANumber()).toBe(false);\n        });\n    });\n});"
  },
  {
    "name": "increment",
    "spec": "Define a function named increment that takes in an input and adds 1 to it if the input is numeric. If the input is not numeric, then return false.",
    "tests": "describe('parseNumber', function() {\n    describe('core functionality', function() {\n        it('should be a defined function', function() {\n            expect(typeof parseNumber).toBe('function');\n        });\n        it('should return 123 when passed a numeric string like \"123\" as input', function() {\n            expect(parseNumber(\"123\")).toBe(123);\n        });\n        it('should return 123 when passed a number like 123 as input', function() {\n            expect(parseNumber(123)).toBe(123);\n        });\n        it('should return ' + randomNegFloatingNumber + ' when passed a numeric string of \"' + randomNegFloatingNumber + '\"', function() {\n            expect(parseNumber(String(randomNegFloatingNumber))).toBe(randomNegFloatingNumber);\n        });\n        it('should return ' + randomNegativeNumber + ' when passed a numeric string of \"' + randomNegativeNumber + '\"', function() {\n            expect(parseNumber(String(randomNegativeNumber))).toBe(randomNegativeNumber);\n        });\n        it('should return ' + randomFloatingNumber + ' when passed a floating number of ' + randomFloatingNumber, function() {\n            expect(parseNumber(randomFloatingNumber)).toBe(randomFloatingNumber);\n        });\n        it('should return ' + randomFloatingNumber + ' when passed a numeric string of \"' + randomFloatingNumber + '\"', function() {\n            expect(parseNumber(String(randomFloatingNumber))).toBe(randomFloatingNumber);\n        });\n    });\n});"
  },
  {
    "name": "decrement",
    "spec": "Define a function named decrement. If the provided input is numeric, the function should subtract 1 and return the result. If the input is not numeric, decrement should return false.",
    "tests": "describe('increment', function() {\n    describe('core functionality', function() {\n        it('should be a defined function', function() {\n            expect(typeof increment).toBe('function');\n        });\n        it('should return a number when passed a number', function() {\n            expect(typeof increment(2)).toBe('number');\n        });\n        it('should return 2 when passed 1', function() {\n            expect(increment(1)).toBe(2);\n        });\n        it('should return ' + (1 + randomPositiveNumber) + ' when passed \"' + randomPositiveNumber + '\"', function() {\n            expect(increment(String(randomPositiveNumber))).toBe(randomPositiveNumber + 1);\n        });\n        it('should return 1 when passed 0', function() {\n            expect(increment(0)).toBe(1);\n        });\n        it('should return ' + (1 + randomPositiveNumber) + ' when passed ' + randomPositiveNumber, function() {\n            expect(increment(randomPositiveNumber)).toBe(randomPositiveNumber + 1);\n        });\n        it('should return ' + (1 + randomNegativeNumber) + ' when passed ' + randomNegativeNumber, function() {\n            expect(increment(randomNegativeNumber)).toBe(randomNegativeNumber + 1);\n        });\n    });\n    describe('validation', function() {\n        it('should return false when passed null', function() {\n            expect(increment(null)).toBe(false);\n        });\n        it('should return false when passed a non-numeric string', function() {\n            expect(increment(exampleString)).toBe(false);\n        });\n        it('should return false when passed a boolean', function() {\n            expect(increment(randomBoolean)).toBe(false);\n        });\n        it('should return false when passed an array', function() {\n            expect(increment(exampleArray)).toBe(false);\n        });\n        it('should return false when passed an object', function() {\n            expect(increment(exampleObject)).toBe(false);\n        });\n        it('should return false when called with no arguments', function() {\n            expect(increment()).toBe(false);\n        });\n    });\n});"
  },
  {
    "name": "getHighestNumber",
    "spec": "Write a function named getHighestNumber that takes in 3 arguments. If all 3 inputs are numbers or numeric strings, then return the highest number. If any of the 3 inputs is missing or non-numeric, then return false.",
    "tests": "describe('decrement', function() {\n    describe('core functionality', function() {\n        it('should be a defined function', function() {\n            expect(typeof decrement).toBe('function');\n        });\n        it('should return a number when passed a number', function() {\n            expect(typeof decrement(3)).toBe('number');\n        });\n        it('should return 3 when passed 4', function() {\n            expect(decrement(4)).toBe(3);\n        });\n        it('should return 0 when passed 1', function() {\n            expect(decrement(1)).toBe(0);\n        });\n        it('should return ' + (randomPositiveNumber - 1) + ' when passed \"' + randomPositiveNumber + '\"', function() {\n            expect(decrement(String(randomPositiveNumber))).toBe(randomPositiveNumber - 1);\n        });\n        it('should return ' + (randomPositiveNumber - 1) + ' when passed ' + randomPositiveNumber, function() {\n            expect(decrement(randomPositiveNumber)).toBe(randomPositiveNumber - 1);\n        });\n    });\n    describe('validation', function() {\n        it('should return false when passed null', function() {\n            expect(decrement(null)).toBe(false);\n        });\n        it('should return false when passed a non-numeric string', function() {\n            expect(decrement(exampleString)).toBe(false);\n        });\n        it('should return false when passed a boolean', function() {\n            expect(decrement(randomBoolean)).toBe(false);\n        });\n        it('should return false when passed an array', function() {\n            expect(decrement(exampleArray)).toBe(false);\n        });\n        it('should return false when passed an object', function() {\n            expect(decrement(exampleObject)).toBe(false);\n        });\n        it('should return false when called with no arguments', function() {\n            expect(decrement()).toBe(false);\n        });\n    });\n});"
  },
  {
    "name": "parseNumber",
    "spec": "Define a function named parseNumber that parses (converts) a numeric String and returns its value as a number, the function should be able to decide if it should be parsing an Integer or a Float value.",
    "tests": "describe('getHighestNumber', function() {\n    describe('core functionality', function() {\n        it('should be a defined function', function() {\n           expect(typeof getHighestNumber).toBe('function');\n        });\n        it('should return a number when called with 3 numbers like getHighestNumber(1, 2, 3)', function() {\n           expect(typeof getHighestNumber(1, 2, 3)).toBe('number');\n        });\n        it('should return 2 when passed the 3 arguments (0, 1, 2)', function() {\n            expect(getHighestNumber(0, 1, 2)).toBe(2);\n        });\n        it('should return 5 when passed the arguments (-10, 0, 5).', function() {\n            expect(getHighestNumber(0, -10, 5)).toBe(5);\n        });\n        it('should return 2 when passed the arguments (2, 2, 2).', function() {\n            expect(getHighestNumber(2, 2, 2)).toBe(2);\n        });\n        it('should return 5 when passed the arguments (3, 5, 5).', function() {\n            expect(getHighestNumber(3, 5, 5)).toBe(5);\n        });\n        it(`should return ${randomPositiveNumber} when passed ${randomPositiveNumber}, 0, and ${randomNegativeNumber}`, function() {\n            expect(getHighestNumber(randomNegativeNumber, 0, randomPositiveNumber)).toBe(randomPositiveNumber);\n        });\n    });\n    describe('validation', function() {\n        it('should return false when passed the arguments (1, 2, \"x\") because not all arguments are numbers.', function() {\n            expect(getHighestNumber(1, 2, \"x\")).toBe(false);\n        });\n        it('should return false when passed the non-numeric arguments (\"a\", \"b\", \"c\")', function() {\n            expect(getHighestNumber(\"a\", \"b\", \"c\")).toBe(false);\n        });\n        it('should return false when called with no provided arguments', function() {\n            expect(getHighestNumber()).toBe(false);\n        });\n        it('should return false when passed a single input made of an array', function() {\n            expect(getHighestNumber(exampleArray)).toBe(false);\n        });\n        it('should return false when passed the boolean ' + randomBoolean, function() {\n           expect(getHighestNumber(randomBoolean)).toBe(false);\n        });\n    });\n});"
  },
  {
    "name": "add",
    "spec": "Write a function named add that takes in two inputs. If both inputs provided are numeric, add will return the sum of both inputs. If one or both inputs is not numeric, add should return false.",
    "tests": "describe('add', function() {\n    describe('core functionality', function() {\n        it('should be a defined function', function() {\n            expect(typeof add).toBe('function');\n        });\n        it('should return a number when passed two numbers', function() {\n            expect(typeof (add(1, 2))).toBe('number');\n        });\n        it('should return 4 when passed 1 and 3', function() {\n            expect(add(1, 3)).toBe(4);\n        });\n        it('should return ' + (randomPositiveNumber + 2) + ' when passed ' + randomPositiveNumber + ' and 2', function() {\n            expect(add(randomPositiveNumber, 2)).toBe(randomPositiveNumber + 2);\n        });\n        it('should return ' + (randomNegativeNumber + randomPositiveNumber) + ' when passed ' + randomPositiveNumber + ' and ' + randomNegativeNumber, function(){\n            expect(add(randomPositiveNumber, randomNegativeNumber)).toBe(randomPositiveNumber + randomNegativeNumber);\n        });\n        it('should return 5 when passed the numeric strings \"2\" and \"3\".', function() {\n            expect(add(\"2\", \"3\")).toBe(5);\n        });\n        it('should return false when called with no arguments', function() {\n            expect(add()).toBe(false);\n        });\n    });\n    describe('validation', function() {\n        it('should return false when passed one numeric input and one non-number input', function() {\n            expect(add(\"Bob\", 2)).toBe(false);\n        });\n        it('should return false when passed null', function() {\n            expect(add(null)).toBe(false);\n        });\n        it('should return false when passed non-numeric strings', function() {\n            expect(add(\"Bob\", \"Jane\")).toBe(false);\n        });\n        it('should return false when passed two true boolean arguments', function() {\n            expect(add(true, true)).toBe(false);\n        });\n        it('should return false when passed two false boolean arguments', function() {\n            expect(add(false, false)).toBe(false);\n        });\n        it('should return false when passed a true and a false argument', function() {\n           expect(add(true, false)).toBe(false);\n        });\n        it('should return false when passed an array', function() {\n            expect(add(exampleArray)).toBe(false);\n        });\n        it('should return false when passed an object', function() {\n            expect(add(exampleObject)).toBe(false);\n        });\n    });\n});"
  },
  {
    "name": "multiply",
    "spec": "Write a function named multiply that takes in two inputs. If both inputs provided are numeric, multiply returns the product of the first input multiplied by the second. If either or both inputs are not numeric, multiply should return false.",
    "tests": "describe('multiply', function() {\n    describe('core functionality', function() {\n        it('should be a defined function', function() {\n            expect(typeof multiply).toBe('function');\n        });\n        it('should return a number when passed two numbers', function() {\n            expect(typeof (multiply(1, 2))).toBe('number');\n        });\n        it('should return 15 when passed 5 and 3', function() {\n            expect(multiply(5, 3)).toBe(15);\n        });\n        it('should return ' + (randomPositiveNumber * 99) + ' when passed ' + randomPositiveNumber + ' and 99', function() {\n            expect(multiply(randomPositiveNumber, 99)).toBe(randomPositiveNumber * 99);\n        });\n        it('should return ' + (randomPositiveNumber * 2) + ' when passed ' + randomPositiveNumber + ' and 2', function() {\n            expect(multiply(randomPositiveNumber, 2)).toBe(randomPositiveNumber * 2);\n        });\n        it('should return ' + (randomPositiveNumber * randomNegativeNumber) + ' when passed ' + randomPositiveNumber + ' and ' + randomNegativeNumber, function() {\n            expect(multiply(randomPositiveNumber, randomNegativeNumber)).toBe(randomPositiveNumber * randomNegativeNumber);\n        });\n        it('should return 6 when passed the numeric strings \"2\" and \"3\".', function() {\n            expect(multiply(\"2\", \"3\")).toBe(6);\n        });\n        it('should return false when passed one numeric input and one non-number input', function() {\n            expect(multiply(\"Bob\", 2)).toBe(false);\n        });\n        it('should return false when passed null', function() {\n            expect(multiply(null)).toBe(false);\n        });\n        it('should return false when passed non-numeric strings', function() {\n            expect(multiply(\"Bob\", \"Jane\")).toBe(false);\n        });\n        it('should return false when passed two true boolean arguments', function() {\n            expect(multiply(true, true)).toBe(false);\n        });\n        it('should return false when passed two false boolean arguments', function() {\n            expect(multiply(false, false)).toBe(false);\n        });\n        it('should return false when passed a true and a false argument', function() {\n        expect(multiply(true, false)).toBe(false);\n        });\n        it('should return false when passed an array', function() {\n            expect(multiply(exampleArray)).toBe(false);\n        });\n        it('should return false when passed an object', function() {\n            expect(multiply(exampleObject)).toBe(false);\n        });\n        it('should return false when called with no arguments', function() {\n            expect(multiply()).toBe(false);\n        });\n    });\n});"
  },
  {
    "name": "square",
    "spec": "Define a function named square. If the provided input is numeric, square should return the number multiplied by itself. If the input is not numeric, square, should return false.",
    "tests": "describe('square', function() {\n    describe('core functionality', function() {\n        it('should be a defined function', function() {\n            expect(typeof square).toBe('function');\n        });\n        it('should return a number when passed a number', function() {\n            expect(typeof square(2)).toBe('number');\n        });\n        it('should return 4 when passed 2', function() {\n            expect(square(2)).toBe(4);\n        });\n        it('should return .25 when passed .5', function() {\n            expect(square(.5)).toBe(.25);\n        });\n        it('should return ' + (randomPositiveNumber * randomPositiveNumber) + ' when passed ' + randomPositiveNumber, function() {\n            expect(square(randomPositiveNumber)).toBe(randomPositiveNumber * randomPositiveNumber);\n        });\n        it('should return 1 when passed 1', function() {\n            expect(square(1)).toBe(1);\n        });\n        it('should return 1 when passed -1', function() {\n            expect(square(-1)).toBe(1);\n        });\n        it('should return 0 when passed 0', function() {\n            expect(square(0)).toBe(0);\n        });\n        it('should return false when passed null', function() {\n            expect(square(null)).toBe(false);\n        });\n        it('should return false when passed a non-numeric string', function() {\n            expect(square(\"Bob\")).toBe(false);\n        });\n        it('should return false when passed a boolean', function() {\n            expect(square(true)).toBe(false);\n        });\n        it('should return false when passed an array', function() {\n            expect(square(exampleArray)).toBe(false);\n        });\n        it('should return false when passed an object', function() {\n            expect(square(exampleObject)).toBe(false);\n        });\n        it('should return false when called with no arguments', function() {\n            expect(square()).toBe(false);\n        });\n    });\n});"
  },
  {
    "name": "sumOfSquares",
    "spec": "Write a function named sumOfSquares that takes in two inputs. If both inputs are numeric, sumOfSquares should square each input and return the sum of them added together. For example, if we pass a and b then we should square a and add it to the square of b. If either or both inputs are not numeric, sumOfSquares should return false.",
    "tests": "describe('sumOfSquares', function() {\n    describe('core functionality', function() {\n        it('should return false when passed null', function () {\n            expect(typeof sumOfSquares).toBe('function');\n        });\n        it('should return a number when passed two numbers', function () {\n            expect(typeof (sumOfSquares(1, 2))).toBe('number');\n        });\n        it('should return 8 when passed 2 and 2', function () {\n            expect(sumOfSquares(2, 2)).toBe(8);\n        });\n        it('should return 2 when passed 1 and 1', function () {\n            expect(sumOfSquares(1, 1)).toBe(2);\n        });\n        it('should return 0 when passed 0 and 0', function () {\n            expect(sumOfSquares(0, 0)).toBe(0);\n        });\n        it('should return 13 when passed 2 and 3', function () {\n            expect(sumOfSquares(2, 3)).toBe(13);\n        });\n        it('should return ' + (randomPositiveNumber * randomPositiveNumber + randomNegativeNumber * randomNegativeNumber) + ' when passed ' + randomNegativeNumber + ' and ' + randomNegativeNumber, function () {\n            expect(sumOfSquares(randomPositiveNumber, randomNegativeNumber)).toBe(randomPositiveNumber * randomPositiveNumber + randomNegativeNumber * randomNegativeNumber);\n        });\n        it('should return false when passed a non-numeric string', function () {\n            expect(sumOfSquares(\"Bob\")).toBe(false);\n        });\n        it('should return false when passed two true arguments', function () {\n            expect(sumOfSquares(true, true)).toBe(false);\n        });\n        it('should return false when passed two false arguments', function () {\n            expect(sumOfSquares(false, false)).toBe(false);\n        });\n        it('should return false when passed an array', function () {\n            expect(sumOfSquares(exampleArray)).toBe(false);\n        });\n        it('should return false when passed an object', function () {\n            expect(sumOfSquares(exampleObject)).toBe(false);\n        });\n        it('should return false when called with no arguments', function () {\n            expect(sumOfSquares()).toBe(false);\n        });\n    });\n});"
  },
  {
    "name": "isPalindrome",
    "spec": "Write a function named isPalindrome that takes in a single input. If the input is a numeric string, then return false. If the input is a string, then return true if the string is the same forwards as it is backwards. Return false if the string is different forwards from backwards. Ignore capitalization.\n\n",
    "tests": "describe('isPalindrome', function() {\n    describe('core functionality', function() {\n        it('should be a defined function', function() {\n            expect(typeof isPalindrome).toBe('function');\n        });\n        it('should return true when passed the input \"Bob\".', function() {\n            expect(isPalindrome(\"Bob\")).toBe(true);\n        });\n        it('should return true when passed the input \"radar\".', function() {\n            expect(isPalindrome('radar')).toBe(true);\n        });\n        it('should return true when passed the input \"ufotofu\"', function() {\n            expect(isPalindrome('ufotofu')).toBe(true);\n        });\n        it('should return true when passed an empty string \"\" as the input.', function() {\n            expect(isPalindrome(\"\")).toBe(true);\n        });\n        it('should return false when passed the input \"Monday\"', function() {\n            expect(isPalindrome(\"Monday\")).toBe(false);\n        });\n    });\n    describe('validation', function() {\n        it('should return false when passed the input ' + randomPositiveNumber, function() {\n            expect(isPalindrome(randomPositiveNumber)).toBe(false);\n        });\n        it('should return false when called with no arguments', function() {\n            expect(isPalindrome()).toBe(false);\n        });\n        it('should return false when passed the array [1, 2, 3]', function() {\n            expect(isPalindrome([1, 2, 3])).toBe(false);\n        });\n    });\n});"
  },
  {
    "name": "isBoolean",
    "spec": "Define a function named isBoolean that takes in a value and returns a boolean if the argument provided is a boolean value or not.\n\n",
    "tests": "describe(\"isBoolean\", function() {\n    it('should be a defined function', function() {\n        expect(typeof isBoolean).toBe('function');\n    });\n    it('should return a boolean value', function() {\n       expect(typeof isBoolean(true)).toBe('boolean');\n       expect(typeof isBoolean(\"Bob\")).toBe('boolean');\n    });\n    it('should return true when passed the boolean true', function() {\n       expect(isBoolean(true)).toBe(true);\n    });\n    it('should return true when passed the boolean false', function() {\n        expect(isBoolean(false)).toBe(true);\n    });\n    it('should return false when passed the number ' + randomPositiveNumber, function() {\n       expect(isBoolean(randomPositiveNumber)).toBe(false);\n    });\n    it('should return false when passed the number ' + randomNegativeNumber, function() {\n       expect(isBoolean(randomNegativeNumber)).toBe(false);\n    });\n    it('should return false when passed the number 0', function() {\n        expect(isBoolean(0)).toBe(false);\n    });\n    it('should return false when passed no inputs (undefined) ', function() {\n        expect(isBoolean()).toBe(false);\n    });\n    it('should return false when passed null', function() {\n        expect(isBoolean(null)).toBe(false);\n    });\n    it('should return false when passed an array', function() {\n        expect(isBoolean(exampleArray)).toBe(false);\n    });\n    it('should return false when passed a string', function() {\n        expect(isBoolean(exampleString)).toBe(false);\n    });\n    it('should return false when passed a string', function() {\n        expect(isBoolean(randomString)).toBe(false);\n    });\n    it('should return false when passed an object', function() {\n        expect(isBoolean(exampleObject)).toBe(false);\n    });\n});"
  },
  {
    "name": "isString",
    "spec": "Define a function named isString that takes in a value as an input and returns a boolean if the input provided is a string or not. Numeric strings will count as strings and should return true.\n\n",
    "tests": "describe('isString', function() {\n    it('should be a defined function', function() {\n        expect(typeof isString).toBe('function');\n    });\n    it('should return a boolean', function() {\n        expect(typeof isString(\"Banana\")).toBe('boolean');\n        expect(typeof isString(45)).toBe('boolean');\n    });\n    it('should return true when the input passed is the string ' + exampleString, function() {\n        expect(isString(exampleString)).toBe(true);\n    });\n    it('should return true when the input passed is the numeric string \"123\".', function() {\n        expect(isString(\"123\")).toBe(true);\n    });\n    it('should return true when the input is the numeric string \"' + randomPositiveNumber + '\".', function() {\n        expect(isString(String(randomPositiveNumber))).toBe(true);\n    });\n    it('should return true when the input is the numeric string \"' + randomNegativeNumber + '\".', function() {\n        expect(isString(String(randomNegativeNumber))).toBe(true);\n    });\n    it('should return true when passed the string \"' + randomString + '\".', function() {\n        expect(isString(randomString)).toBe(true);\n    });\n    it('should return false when passed no input', function() {\n        expect(isString()).toBe(false);\n    });\n    it('should return false when passed boolean inputs', function() {\n        expect(isString(true)).toBe(false);\n        expect(isString(false)).toBe(false);\n    });\n    it('should return false when passed a number', function() {\n        expect(isString(randomPositiveNumber)).toBe(false);\n        expect(isString(randomNegativeNumber)).toBe(false);\n    });\n    it('should return false when passed an array', function() {\n        expect(isString(exampleArray)).toBe(false);\n    });\n    it('should return false when passed an object', function() {\n        expect(isString(exampleObject)).toBe(false);\n    });\n    it('should return false when passed null', function() {\n        expect(isString(null)).toBe(false);\n    });\n});"
  },
  {
    "name": "isNotString",
    "spec": "Define a function named isNotString that accepts an input and returns true or false based on whether an input is not a string. Numeric strings will count as strings and should return false.\n\n",
    "tests": "describe('isNotString', function() {\n    it('should be a defined function', function() {\n        expect(typeof isNotString).toBe('function');\n    });\n    it('should return a boolean', function() {\n        expect(typeof isNotString(\"Banana\")).toBe('boolean');\n        expect(typeof isNotString(45)).toBe('boolean');\n    });\n    it('should return false when the input passed is the string ' + exampleString, function() {\n        expect(isNotString(exampleString)).toBe(false);\n    });\n    it('should return false when the input passed is the numeric string \"123\".', function() {\n        expect(isNotString(\"123\")).toBe(false);\n    });\n    it('should return false when the input is the numeric string \"' + randomPositiveNumber + '\".', function() {\n        expect(isNotString(String(randomPositiveNumber))).toBe(false);\n    });\n    it('should return false when the input is the numeric string \"' + randomNegativeNumber + '\".', function() {\n        expect(isNotString(String(randomNegativeNumber))).toBe(false);\n    });\n    it('should return false when passed the string \"' + randomString + '\".', function() {\n        expect(isNotString(randomString)).toBe(false);\n    });\n    it('should return true when passed no input', function() {\n        expect(isNotString()).toBe(true);\n    });\n    it('should return true when passed boolean inputs', function() {\n        expect(isNotString(true)).toBe(true);\n        expect(isNotString(false)).toBe(true);\n    });\n    it('should return true when passed a number', function() {\n        expect(isNotString(randomPositiveNumber)).toBe(true);\n        expect(isNotString(randomNegativeNumber)).toBe(true);\n    });\n    it('should return true when passed an array', function() {\n        expect(isNotString(exampleArray)).toBe(true);\n    });\n    it('should return true when passed an object', function() {\n        expect(isNotString(exampleObject)).toBe(true);\n    });\n    it('should return true when passed null', function() {\n        expect(isNotString(null)).toBe(true);\n    });\n});"
  },
  {
    "name": "isEmptyString",
    "spec": "Define a function named isEmptyString that will return true when passed an argument with the value of \"\", i.e. an empty string. All other arguments should return false.\n\n",
    "tests": "describe('isEmptyString', function(){\n    it('should be a defined function.', function() {\n        expect(typeof isEmptyString).toBe('function');\n    });\n    it('should return a boolean value.', function() {\n        expect(typeof isEmptyString(\"\")).toBe('boolean');\n        expect(typeof isEmptyString(1)).toBe('boolean');\n    });\n    it('should return true when passed the string \"\".', function() {\n        expect(isEmptyString(\"\")).toBe(true);\n    });\n    it('should return false when passed the string \"' + randomString + '\".', function() {\n        expect(isEmptyString(randomString)).toBe(false);\n    });\n    it('should return false when passed the string \"Jim Henson\".', function () {\n        expect(isEmptyString('Jim Henson')).toBe(false);\n    });\n    it('should return false when passed the string \"  Bill     & Ted   \".', function () {\n        expect(isEmptyString('  Bill     & Ted   ')).toBe(false);\n    });\n    it('should return false when passed the string \"   \".', function () {\n        expect(isEmptyString('   ')).toBe(false);\n    });\n    it('should return false when passed the number 0.', function() {\n        expect(isEmptyString(0)).toBe(false);\n    });\n    it('should return false when passed the number '+ randomPositiveNumber +'.', function() {\n        expect(isEmptyString(randomPositiveNumber)).toBe(false);\n    });\n    it('should return false when passed the number '+ randomNegativeNumber +'.', function() {\n        expect(isEmptyString(randomNegativeNumber)).toBe(false);\n    });\n    it('should return false when passed a boolean.', function() {\n        expect(isEmptyString(true)).toBe(false);\n        expect(isEmptyString(false)).toBe(false);\n    });\n    it('should return false when passed an array.', function() {\n        expect(isEmptyString(exampleArray)).toBe(false);\n    });\n    it(\"should return false when called without an argument provided.\", function () {\n        expect(isEmptyString()).toBe(false);\n    })\n});"
  },
  {
    "name": "isNotANumber",
    "spec": "Define a function named isNotANumber that accepts an input and returns true or false based on whether an input is a non-numeric value or not. Numbers as strings are not a number and should return true.\n\n",
    "tests": "describe('isNotANumber', function() {\n    it('should be a defined function', function() {\n        expect(typeof isNotANumber).toBe('function');\n    });\n    it('should return a boolean value', function() {\n        expect(typeof isNotANumber(4)).toBe('boolean');\n        expect(typeof isNotANumber(\"Bob\")).toBe('boolean');\n    });\n    it('should return false when passed 0 as input', function() {\n        expect(isNotANumber(0)).toBe(false);\n    });\n    it('should return false when passed -5 as input', function() {\n        expect(isNotANumber(-5)).toBe(false);\n    });\n    it('should return false when passed ' + randomNegativeNumber, function() {\n        expect(isNotANumber(randomNegativeNumber)).toBe(false);\n    });\n    it('should return false when passed ' + randomPositiveNumber, function() {\n        expect(isNotANumber(randomPositiveNumber)).toBe(false);\n    });\n    it('should return false when passed Infinity, since infinity is considered a number.', function() {\n        expect(isNotANumber(Infinity)).toBe(false);\n    });\n    it('should return true when passed the boolean ' + randomBoolean, function() {\n        expect(isNotANumber(randomBoolean)).toBe(true);\n    });\n    it('should return true when passed the string \"Grace Hopper\"', function() {\n        expect(isNotANumber(exampleString)).toBe(true);\n    });\n    it('should return true when passed null as the input', function() {\n        expect(isNotANumber(null)).toBe(true);\n    });\n    it('should return true when passed an array', function() {\n        expect(isNotANumber(exampleArray)).toBe(true);\n    });\n    it('should return true when passed an object', function() {\n        expect(isNotANumber(exampleObject)).toBe(true);\n    });\n    it('should return true when no input is passed in as an argument', function() {\n        expect(isNotANumber()).toBe(true);\n    });\n});"
  },
  {
    "name": "isNegative",
    "spec": "Define a function named isNegative that accepts a number and returns true or false based on whether the input is less than zero.\n\n",
    "tests": "describe('isNegative', function() {\n    it('should be a defined function', function() {\n        expect(typeof isNegative).toBe('function');\n    });\n    it('should return a boolean value', function() {\n        expect(typeof isNegative(-12)).toBe('boolean');\n        expect(typeof isNegative(12)).toBe('boolean');\n    });\n    it('return false for 0', function() {\n        expect(isNegative(0)).toBe(false);\n    });\n    it('returns true for -1', function() {\n        expect(isNegative(-1)).toBe(true);\n    });\n    it('returns false for 6', function() {\n        expect(isNegative(6)).toBe(false);\n    });\n    it('returns false for 123.456', function() {\n        expect(isNegative(123.456)).toBe(false);\n    });\n    it('returns true for -3.14159', function() {\n        expect(isNegative(-3.14159)).toBe(true);\n    });\n    it('returns true for ' + randomNegativeNumber, function() {\n        expect(isNegative(randomNegativeNumber)).toBe(true);\n    });\n    it('returns true for the string number \"-4\".', function() {\n        expect(isNegative(\"-4\")).toBe(true);\n    });\n    it('returns false for ' + randomPositiveNumber , function() {\n        expect(isNegative(randomPositiveNumber)).toBe(false);\n    });\n    it('returns false for the string number \"23\".', function() {\n        expect(isNegative(23)).toBe(false);\n    });\n    it('returns false for non-number strings such as \"Grace Hopper\"', function() {\n        expect(isNegative(\"Grace Hopper\")).toBe(false);\n    });\n    it('returns false when no argument is provided as input to the function', function() {\n        expect(isNegative()).toBe(false);\n    });\n    it('should return false when passed an array', function() {\n        expect(isNegative(exampleArray)).toBe(false);\n    });\n    it('should return false when passed the boolean ' + randomBoolean, function() {\n        expect(isNegative(randomBoolean)).toBe(false);\n    });\n    it('should return false when passed a string', function() {\n        expect(isNegative(randomString)).toBe(false);\n    });\n});"
  },
  {
    "name": "isPositive",
    "spec": "Define a function named isPositive that accepts an input and returns true or false based on whether the input is above zero. Any non-numeric input should return false.\n\n",
    "tests": "describe('isPositive', function() {\n    it('should be a defined function', function(){\n        expect(typeof isPositive).toBe('function');\n    });\n    it('should return a boolean value', function() {\n        expect(typeof isPositive(randomPositiveNumber)).toBe('boolean');\n        expect(typeof isPositive(randomNegativeNumber)).toBe('boolean');\n    });\n    it('should return true for 1', function() {\n        expect(isPositive(1)).toBe(true);\n    });\n    it('should return true for ' + randomPositiveNumber, function() {\n        expect(isPositive(randomPositiveNumber)).toBe(true);\n    });\n    it('shound return true for the numeric string \"12\".', function() {\n        expect(isPositive(\"12\")).toBe(true);\n    });\n    it('should return false for 0', function() {\n        expect(isPositive(0)).toBe(false);\n    });\n    it('should return false for ' + randomNegativeNumber, function() {\n        expect(isPositive(randomNegativeNumber)).toBe(false);\n    });\n    it('returns false for non-number strings such as \"Grace Hopper\"', function() {\n        expect(isPositive(\"Grace Hopper\")).toBe(false);\n    });\n    it('returns false when no argument is provided as input to the function', function() {\n        expect(isPositive()).toBe(false);\n    });\n    it('returns false when passed an array', function() {\n        expect(isPositive(exampleArray)).toBe(false);\n    });\n    it('returns false when passed an object', function() {\n        expect(isPositive(exampleObject)).toBe(false);\n    });\n    it('returns false when passed null', function() {\n        expect(isPositive(null)).toBe(false);\n    });\n    it('returns false when passed the boolean value ' + randomBoolean, function() {\n        expect(isPositive(false)).toBe(false);\n    });\n});"
  },
  {
    "name": "isZero",
    "spec": "Define a function named isZero that will return true when passed an argument of the numeric value 0, and return false for all other arguments.\n\n",
    "tests": "describe('isZero', function(){\n    it('should be a defined function', function() {\n        expect(typeof isZero).toBe('function');\n    });\n    it('should return a boolean value', function() {\n        expect(typeof isZero(0)).toBe('boolean');\n        expect(typeof isZero(1)).toBe('boolean');\n    });\n    it('should return true when passed the number 0', function() {\n        expect(isZero(0)).toBe(true);\n    });\n    it('returns false for -1', function() {\n        expect(isZero(-1)).toBe(false);\n    });\n    it('returns false for 6', function() {\n        expect(isZero(6)).toBe(false);\n    });\n    it('returns false for 123.456', function() {\n        expect(isZero(123.456)).toBe(false);\n    });\n    it('returns false for -3.14159', function() {\n        expect(isZero(-3.14159)).toBe(false);\n    });\n    it('returns false for ' + randomNegativeNumber, function() {\n        expect(isZero(randomNegativeNumber)).toBe(false);\n    });\n    it('returns true for the string number \"0\".', function() {\n        expect(isZero(\"0\")).toBe(true);\n    });\n    it('returns false for ' + randomPositiveNumber , function() {\n        expect(isZero(randomPositiveNumber)).toBe(false);\n    });\n    it('returns false for the string number \"23\".', function() {\n        expect(isZero('23')).toBe(false);\n    });\n    it('returns false for non-number strings such as \"Grace Hopper\"', function() {\n        expect(isZero(\"Grace Hopper\")).toBe(false);\n    });\n    it('returns false when no argument is provided as input to the function', function() {\n        expect(isZero()).toBe(false);\n    });\n    it('should return false when passed an array', function() {\n        expect(isZero(exampleArray)).toBe(false);\n    });\n    it('should return false when passed a string', function() {\n        expect(isZero(randomString)).toBe(false);\n    });\n});"
  },
  {
    "name": "isArray",
    "spec": "Define a function named isArray that takes in an input and returns a boolean whether or not that input is an array or not.\n\n",
    "tests": "describe('isArray', function() {\n    it('should be a defined function', function() {\n        expect(typeof isArray).toBe('function');\n    });\n    it('should return a boolean value', function() {\n        expect(typeof isArray([1, 2, 3])).toBe('boolean');\n        expect(typeof isArray(1)).toBe('boolean');\n    });\n    it('should return true when passed the array [1, 2, 3]', function() {\n        expect(isArray([1, 2, 3])).toBe(true);\n    });\n    it('should return true when passed an array of strings', function() {\n        expect(isArray(exampleArray)).toBe(true);\n    });\n    it('should return true when passed an array of numbers', function() {\n        expect(isArray([randomPositiveNumber, randomNegativeNumber])).toBe(true);\n    });\n    it('should return false when passed an object', function() {\n        expect(isArray(exampleObject)).toBe(false);\n    });\n    it('should return false when passed a string', function() {\n        expect(isArray(exampleString)).toBe(false);\n    });\n    it('should return false when passed a boolean', function() {\n        expect(isArray(randomBoolean)).toBe(false);\n    });\n    it('should return false when passed null', function() {\n        expect(isArray(null)).toBe(false);\n    });\n    it('should return false when passed a number', function() {\n        expect(isArray(randomPositiveNumber)).toBe(false);\n    });\n    it('should return false when called with no inputs', function() {\n        expect(isArray()).toBe(false);\n    });\n});"
  },
  {
    "name": "upperCase",
    "spec": "Define a function named upperCase that takes in a single input. If the input is not a string, return false. If the input is a non-numeric string, then return it with all the letters capitalized.\n\n",
    "tests": "describe('upperCase', function() {\n    it('should be a defined function', function() {\n        expect(typeof upperCase).toBe('function');\n    });\n    it(\"should return 'CODEUP' when passed the string 'Codeup'.\", function() {\n        expect(upperCase('Codeup')).toBe('CODEUP');\n    });\n    it(\"should return 'JAVASCRIPT' when passed the string 'JavaScript'.\", function() {\n        expect(upperCase('JavaScript')).toBe(\"JAVASCRIPT\");\n    });\n    it(\"should return '' when passed the empty string ''.\", function() {\n        expect(upperCase(\"\")).toBe(\"\");\n    });\n    it(\"should return 'BOB' when passed the string 'BOB'.\", function() {\n        expect(upperCase(\"BOB\")).toBe(\"BOB\");\n    });\n    it(\"should return false when passed '45'.\", function() {\n        expect(upperCase('45')).toBe('45');\n    });\n    it('should return false when passed null', function() {\n        expect(upperCase(null)).toBe(false);\n    });\n    it('should return false when called with no arguments', function() {\n        expect(upperCase()).toBe(false);\n    });\n    it('should return false when passed the array [1, 2, 3]', function() {\n        expect(upperCase([1, 2, 3])).toBe(false);\n    });\n});"
  },
  {
    "name": "isGreaterThan",
    "spec": "Define a function named isGreaterThan that takes in two values and returns a true if the first argument is greater than the second argument otherwise it should return false. If either argument is not a number, return false;",
    "tests": "describe(\"isGreaterThan\", function () {\n    it('should be a defined function', function () {\n        expect(typeof isGreaterThan).toBe('function');\n    });\n    it('should return true when passed 9.3, 7.4.', function () {\n        expect(isGreaterThan(9.3, 7.4)).toBe(true)\n    });\n    it('shound return false when passed 3.14, 3.14.', function () {\n        expect(isGreaterThan(3.14, 3.14)).toBe(false);\n    });\n    it('should return false when passed 7.4, 9.3.', function () {\n        expect(isGreaterThan(7.4, 9.3)).toBe(false);\n    });\n    it('should return false when passed -9.3, 7.4.', function () {\n        expect(isGreaterThan(-9.3, 7.4)).toBe(false);\n    });\n    it('should return false when passed the number 0', function () {\n        expect(isGreaterThan(-3.14, 3.14)).toBe(false);\n    });\n    it('should return false when passed -7.4, 9.3.', function () {\n        expect(isGreaterThan(-7.4, 9.3)).toBe(false);\n    });\n    it('should return true when passed 9.3, -7.4.', function () {\n        expect(isGreaterThan(9.3, -7.4)).toBe(true);\n    });\n    it('should return true when passed 3.14, -3.14.', function () {\n        expect(isGreaterThan(3.14, -3.14)).toBe(true);\n    });\n    it('should return true when passed 7.4, -9.3.', function () {\n        expect(isGreaterThan(7.4, -9.3)).toBe(true);\n    });\n    it('should return false when passed -9.3, -7.4.', function () {\n        expect(isGreaterThan(-9.3, -7.4)).toBe(false);\n    });\n    it('should return false when passed -3.14, -3.14.', function () {\n        expect(isGreaterThan(-3.14, -3.14)).toBe(false);\n    });\n    it('should return false when passed -7.4, -9.3.', function () {\n        expect(isGreaterThan(-7.4, -9.3)).toBe(true);\n    });\n    it('should return false when passed null, null.', function () {\n        expect(isGreaterThan(null, null)).toBe(false);\n    });\n    it('should return false when passed \\'Seven\\', \\'eight\\'', function () {\n        expect(isGreaterThan('Seven', 'eight')).toBe(false);\n    });\n});"
  },
  {
    "name": "isLessThan",
    "spec": "Define a function named isLessThan that takes in two values and returns a true if the first argument is less than the second argument otherwise it should return false. If either argument is not a number, return false;\n\n",
    "tests": "describe(\"isLessThan\", function () {\n    it('should be a defined function', function () {\n        expect(typeof isLessThan).toBe('function');\n    });\n    it('should return true when passed 9.3, 7.4.', function () {\n        expect(isLessThan(9.3, 7.4)).toBe(false)\n    });\n    it('shound return false when passed 3.14, 3.14.', function () {\n        expect(isLessThan(3.14, 3.14)).toBe(false);\n    });\n    it('should return false when passed 7.4, 9.3.', function () {\n        expect(isLessThan(7.4, 9.3)).toBe(true);\n    });\n    it('should return false when passed -9.3, 7.4.', function () {\n        expect(isLessThan(-9.3, 7.4)).toBe(true);\n    });\n    it('should return false when passed -3.14, 3.14', function () {\n        expect(isLessThan(-3.14, 3.14)).toBe(true);\n    });\n    it('should return false when passed -7.4, 9.3.', function () {\n        expect(isLessThan(-7.4, 9.3)).toBe(true);\n    });\n    it('should return true when passed 9.3, -7.4.', function () {\n        expect(isLessThan(9.3, -7.4)).toBe(false);\n    });\n    it('should return true when passed 3.14, -3.14.', function () {\n        expect(isLessThan(3.14, -3.14)).toBe(false);\n    });\n    it('should return true when passed 7.4, -9.3.', function () {\n        expect(isLessThan(7.4, -9.3)).toBe(false);\n    });\n    it('should return false when passed -9.3, -7.4.', function () {\n        expect(isLessThan(-9.3, -7.4)).toBe(true);\n    });\n    it('should return false when passed 3.14, -3.14.', function () {\n        expect(isLessThan(3.14, -3.14)).toBe(false);\n    });\n    it('should return false when passed -7.4, -9.3.', function () {\n        expect(isLessThan(-7.4, -9.3)).toBe(false);\n    });\n    it('should return false when passed null, null.', function () {\n        expect(isLessThan(null, null)).toBe(false);\n    });\n    it('should return false when passed \\'Seven\\', \\'eight\\'', function () {\n        expect(isLessThan('Seven', 'eight')).toBe(false);\n    });\n});"
  },
  {
    "name": "isEqualNumber",
    "spec": "Define a function named isEqualNumber that takes in two values and returns a true if the first argument is equal to the second argument, otherwise it should return false. If either argument is not a number return false;\n\n",
    "tests": "describe(\"isEqualNumber\", function () {\n    it('should be a defined function', function () {\n        expect(typeof isEqualNumber).toBe('function');\n    });\n    it('should return true when passed 9.3, 7.4.', function () {\n        expect(isEqualNumber(9.3, 7.4)).toBe(false)\n    });\n    it('shound return false when passed 3.14, 3.14.', function () {\n        expect(isEqualNumber(3.14, 3.14)).toBe(true);\n    });\n    it('should return false when passed 7.4, 9.3.', function () {\n        expect(isEqualNumber(7.4, 9.3)).toBe(false);\n    });\n    it('should return false when passed -9.3, 7.4.', function () {\n        expect(isEqualNumber(-9.3, 7.4)).toBe(false);\n    });\n    it('should return false when passed the number 0', function () {\n        expect(isEqualNumber(-3.14, 3.14)).toBe(false);\n    });\n    it('should return false when passed -7.4, 9.3.', function () {\n        expect(isEqualNumber(-7.4, 9.3)).toBe(false);\n    });\n    it('should return true when passed 9.3, -7.4.', function () {\n        expect(isEqualNumber(9.3, -7.4)).toBe(false);\n    });\n    it('should return true when passed 3.14, -3.14.', function () {\n        expect(isEqualNumber(3.14, -3.14)).toBe(false);\n    });\n    it('should return true when passed 7.4, -9.3.', function () {\n        expect(isEqualNumber(7.4, -9.3)).toBe(false);\n    });\n    it('should return false when passed -9.3, -7.4.', function () {\n        expect(isEqualNumber(-9.3, -7.4)).toBe(false);\n    });\n    it('should return false when passed 3.14, -3.14.', function () {\n        expect(isEqualNumber(3.14, -3.14)).toBe(false);\n    });\n    it('should return false when passed -7.4, -9.3.', function () {\n        expect(isEqualNumber(-7.4, -9.3)).toBe(false);\n    });\n    it('should return false when passed null, null.', function () {\n        expect(isEqualNumber(null, null)).toBe(false);\n    });\n    it('should return false when passed \\'Seven\\', \\'eight\\'', function () {\n        expect(isEqualNumber('Seven', 'eight')).toBe(false);\n    });\n});"
  },
  {
    "name": "isEqual",
    "spec": "Define a function named isEqual that takes in two values and returns a true if the first argument has the same value as the second argument regardless of type, otherwise it should return false.;\n\n",
    "tests": "describe(\"isEqual\", function () {\n    it('should be a defined function', function () {\n        expect(typeof isEqual).toBe('function');\n    });\n    it('should return true when passed \"Bill\", \"Bill\".', function () {\n        expect(isEqual(\"Bill\", \"Bill\")).toBe(true)\n    });\n    it('shound return true when passed 9, 9.', function () {\n        expect(isEqual(9, 9)).toBe(true);\n    });\n    it('should return true when passed null, null.', function () {\n        expect(isEqual(null, null)).toBe(true);\n    });\n    it('should return true when passed false, false.', function () {\n        expect(isEqual(false, false)).toBe(true);\n    });\n    it('should return false when passed \"Codeup\", \"time\"', function () {\n        expect(isEqual(\"Codeup\", \"time\")).toBe(false);\n    });\n    it('should return false when passed \"James\", \"Jimmy\".', function () {\n        expect(isEqual(\"James\", \"Jimmy\")).toBe(false);\n    });\n    it('should return false when passed null, true.', function () {\n        expect(isEqual(null, true)).toBe(false);\n    });\n    it('should return false when passed true, false.', function () {\n        expect(isEqual(true, false)).toBe(false);\n    });\n});"
  },
  {
    "name": "isNot",
    "spec": "Define a function named isNot that accepts a boolean argument and returns the opposite value of the argument. It should return false if the arguments is null or not a boolean.\n\n",
    "tests": "describe(\"isNot\", function () {\n    it('should be a defined function', function () {\n        expect(typeof isNot).toBe('function');\n    });\n    it('should return true when passed false.', function () {\n        expect(isNot(false)).toBe(true)\n    });\n    it('shound return false when passed true.', function () {\n        expect(isNot(true)).toBe(false);\n    });\n    it('should return false when passed null, null.', function () {\n        expect(isNot(\"Bob\")).toBe(false);\n    });\n    it('should return false when passed false, false.', function () {\n        expect(isNot(null)).toBe(false);\n    });\n});"
  },
  {
    "name": "calcAbs",
    "spec": "Define a function named calcAbs that accepts a number argument and returns the absolute value of the argument. It should return O (zero) if the arguments is null or not a number.\n\n",
    "tests": "describe(\"calcAbs\", function () {\n    it('should be a defined function', function () {\n        expect(typeof calcAbs).toBe('function');\n    });\n    it('should return 10 when passed 10.', function () {\n        expect(calcAbs(10)).toBe(10)\n    });\n    it('shound return 17.3 when passed 17.3.', function () {\n        expect(calcAbs(17.3)).toBe(17.3);\n    });\n    it('should return 1.1 when passed 2.7 - 3.8.', function () {\n        expect(calcAbs(2.7 - 3.8)).toBeCloseTo(1.1, 0.1);\n    });\n    it('should return 0 when passed \"Bob\".', function () {\n        expect(calcAbs(\"Bob\")).toBe(0);\n    });\n    it('should return 0 when passed null.', function () {\n        expect(calcAbs(null)).toBe(0);\n    });\n});"
  },
  {
    "name": "calcCube",
    "spec": "Define a function named calcCube that accepts a number argument and returns the cubed value of the argument. It should return O (zero) if the arguments is null or not a number.\n\n",
    "tests": "describe(\"calcCube\", function () {\n    it('should be a defined function', function () {\n        expect(typeof calcCube).toBe('function');\n    });\n    it('should return 10000 when passed 10.', function () {\n        expect(calcCube(10)).toBe(1000)\n    });\n    it('shound return 27 when passed 3.', function () {\n        expect(calcCube(3)).toBe(27);\n    });\n    it('should return -64 when passed 1.1.', function () {\n        expect(calcCube(-4)).toBe(-64);\n    });\n    it('should return 0 when passed \"Bob\".', function () {\n        expect(calcCube(\"Bob\")).toBe(0);\n    });\n    it('should return 0 when passed null.', function () {\n        expect(calcCube(null)).toBe(0);\n    });\n});"
  },
  {
    "name": "isTypeMatch",
    "spec": "Define a function named isTypeMatch that accepts two arguments and returns true if the types of the arguments match. It should return false if either arguments is null.\n\n",
    "tests": "describe(\"isTypeMatch\", function () {\n    it('should be a defined function', function () {\n        expect(typeof isTypeMatch).toBe('function');\n    });\n    it('should return true when passed 16.3, -84.', function () {\n        expect(isTypeMatch(16.3, -84)).toBe(true);\n    });\n    it('shound return true when passed \"Hello\", \" stranger\".', function () {\n        expect(isTypeMatch(\"Hello\", \" stranger\")).toBe(true);\n    });\n    it('should return false when passed \"Hello\", 1984.', function () {\n        expect(isTypeMatch(\"Hello\", 1984)).toBe(false);\n    });\n    it('should return false when passed true, \"stranger\".', function () {\n        expect(isTypeMatch(true, \"stranger\")).toBe(false);\n    });\n    it('should return false when passed null, 27.', function () {\n        expect(isTypeMatch(null, 27)).toBe(false);\n    });\n});"
  },
  {
    "name": "findLongestString",
    "spec": "Define a function named findLongestString that accepts two string arguments and returns the string with the greatest length. If only one argument is a string, return that argument. If neither arguments are strings, return and empty string.\n\n",
    "tests": "describe(\"findLongestString\", function () {\n    it('should be a defined function', function () {\n        expect(typeof findLongestString).toBe('function');\n    });\n    it('should return \"Jethro\" when passed \"Jethro\", \"Tull\".', function () {\n        expect(findLongestString(\"Jethro\", \"Tull\")).toBe(\"Jethro\");\n    });\n    it('shound return \" stranger\" when passed \"Hello\", \" stranger\".', function () {\n        expect(findLongestString(\"Hello\", \" stranger\")).toBe(\" stranger\");\n    });\n    it('should return \"Hello\" when passed \"Hello\", 1984.', function () {\n        expect(findLongestString(\"Hello\", 1984)).toBe(\"Hello\");\n    });\n    it('should return \"stranger\" when passed true, \"stranger\".', function () {\n        expect(findLongestString(true, \"stranger\")).toBe(\"stranger\");\n    });\n    it('should return \"\" when passed null, 27.', function () {\n        expect(findLongestString(null, 27)).toBe(\"\");\n    });\n});"
  },
  {
    "name": "isFactor",
    "spec": "Define a function named isFactor that accepts two number arguments and returns true if the first argument is a factor of the second argument. It should return false if either argument is null or not a number. Also return null if the first argument is 0 (zero).\n\n",
    "tests": "describe(\"isFactor\", function () {\n    it('should be a defined function', function () {\n        expect(typeof isFactor).toBe('function');\n    });\n    it('should return true when passed 3, 9.', function () {\n        expect(isFactor(3, 9)).toBe(true);\n    });\n    it('shound return true when passed -4, 16.', function () {\n        expect(isFactor(-4, 16)).toBe(true);\n    });\n    it('should return false when passed 9, 3.', function () {\n        expect(isFactor(9, 3)).toBe(false);\n    });\n    it('should return false when passed true, 2.', function () {\n        expect(isFactor(true, 2)).toBe(false);\n    });\n    it('should return false when passed null, 13.', function () {\n        expect(isFactor(null, 13)).toBe(false);\n    });\n    it('should return false when passed 0, 8.', function () {\n        expect(isFactor(0, 8)).toBe(false);\n    });\n});"
  }
]


